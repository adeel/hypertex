#!/usr/bin/env python

import sys
import os.path
from functools import reduce
from lxml import etree
from jinja2 import Environment, FileSystemLoader

_par_tags = ["par"]
_block_tags = ["p", "def", "rmk", "lem", "prp", "thm", "cor", "prf", "exm"]
_frmt_tags = ["b", "i", "u", "d", "cite"]

def _dict_merge(d, e):
  return dict(list(d.items()) + list(e.items()))

def _parse_head(head):
  title = head.find("title")
  author = head.find("author")
  return {"title":  title.text if title is not None else "",
          "author": author.text if author is not None else "",
          "macros": dict([(x.attrib.get("name"), x.attrib.get("value"))
                      for x in head.findall("macro")])}

def _parse_frmt_tag(element):
  "Return the type of a formatting tag (e.g. b => bold)."

  if element.tag == "b":
    return {"type": "bold"}
  elif element.tag == "i":
    return {"type": "italic"}
  elif element.tag == "u":
    return {"type": "underline"}
  elif element.tag == "d":
    return {"type": "definition"}
  elif element.tag == "cite":
    return {"type": "citation",
      "ref": element.attrib.get("ref"),
      "tag": element.attrib.get("tag")}

def _parse_node(element):
  """
  Parse a node (block tag or formatting tag).
  Block tags are def, thm, prp, lem, cor, rmk, exm, prf.
  Formatting tags are b, i, u, d, cite.
  """

  content = (([element.text] if element.text else [])
    + sum([[_parse_node(child), child.tail or ""] for child in element], []))
  if element.tag in _par_tags:
    return {"content": content}
  elif element.tag in _block_tags:
    return {"type": element.tag, "content": content}
  elif element.tag in _frmt_tags:
    return _dict_merge(_parse_frmt_tag(element), {"content": content})

def _parse_body_pars(pars, element):
  if element.tag in _par_tags:
    return pars + [{
      "type":    element.tag,
      "content": [_parse_node(element)],
      "tags":    element.attrib.get("tag", "").split(";")}]
  return pars

def _parse_body(body):
  return {"body": {"pars": reduce(_parse_body_pars, body, [])}}

def _parse_first_gen(parsed, element):
  if element.tag == "head":
    return _dict_merge(parsed, _parse_head(element))
  if element.tag == "body":
    return _dict_merge(parsed, _parse_body(element))
  return parsed

def parse_texml(input):
  root = etree.fromstring(input)
  return reduce(_parse_first_gen, root, {})

def _render_content(node):
  if type(node) is str:
    return node
  content = node.get("content", "")
  if type(content) is list:
    content = "".join(_render_node_to_html(n) for n in content)
  return content

def _render_citation_to_html(node):
  tag = node.get("tag", "")
  ref = node.get("ref", "")
  url = ""
  text = _render_content(node)
  if tag:
    tag_parts = tag.split("/")
    if len(tag_parts) == 0:
      url = "#"
    elif len(tag_parts) == 1:
      url = "#" + tag_parts[0]
    else:
      url = "%s.html#%s" % (tag_parts[0], tag_parts[1])
    if not text.strip():
      text = tag
  elif ref:
    url = "#%s" % ref
  tmpl_path = os.path.dirname(os.path.realpath(__file__))
  env = Environment(loader=FileSystemLoader(tmpl_path))
  template = env.get_template("citation.html")
  return template.render({
    "tag":  tag,
    "ref":  ref,
    "url":  url,
    "text": text})

def _render_node_to_html(node):
  if type(node) is str:
    return node
  content = _render_content(node)
  if node.get("type") in _block_tags:
    tmpl_path = os.path.dirname(os.path.realpath(__file__))
    env = Environment(loader=FileSystemLoader(tmpl_path))
    template = env.get_template("block.html")
    return template.render({"block": _dict_merge(node, {"content": content})})
  if node.get("type") == "paragraph":
    return "<p>%s</p>" % content
  if node.get("type") == "bold":
    return "<b>%s</b>" % content
  if node.get("type") == "italic":
    return "<i>%s</i>" % content
  if node.get("type") == "definition":
    return "<span class=\"definition\">%s</span>" % content
  if node.get("type") == "citation":
    return _render_citation_to_html(node)
  return content

def _render_par_to_html(par):
  return "".join(_render_node_to_html(n) for n in par.get("content"))

def _render_content_to_html(parsed):
  return "\n".join(_render_node_to_html(par) for par in parsed["body"]["pars"])

def _escape_macros(macros):
  return [(k, v.replace("\\", "\\\\")) for (k, v) in macros.items()]

def texml_to_html(input):
  parsed = parse_texml(input)

  tmpl_path = os.path.dirname(os.path.realpath(__file__))
  env = Environment(loader=FileSystemLoader(tmpl_path))
  template = env.get_template("template.html")
  html = template.render({
    "title":   parsed["title"],
    "author":  parsed["author"],
    "macros":  _escape_macros(parsed["macros"]),
    "pars":   [_dict_merge(p, {"content": _render_par_to_html(p)}) for p in parsed["body"]["pars"]]})
  return html

if __name__ == "__main__":
  if len(sys.argv) < 2:
    print("Please specify input texml file.")
    exit()
  infile = sys.argv[1]
  try:
    input = open(infile, "r").read()
  except IOError:
    print("Unable to open the file: %s" % infile)
    exit()
  outfile = os.path.splitext(infile)[0] + ".html"
  try:
    open(outfile, "w").write(texml_to_html(input))
  except IOError:
    print("Unable to write to file: %s" % outfile)
